component ModuleType1
    % ModuleType1:2
    % Module Block
    %    Model resolution: Detailed
    %    Number of parallel assemblies: 2
    %    Number of cells per parallel assembly: 3
    %
    %
    %    Inter-cell heat transfer: on
    %    Number of inter-cell thermal connections: 4
    %    Number of inter-parallel assembly thermal connections: 7
    %
    %    MATLAB version: 24.2
    %    Simscape Battery version: 24.2
    %    Simscape code generated on: 17-Nov-2024 08:22:24

    parameters(ExternalAccess=none)
        AmbientResistanceConnectionIndex = getConnectionIndex(AmbientResistance,S); % AmbientResistanceConnectionIndex
        InterCellThermalResistanceConnectionIndex = getConnectionIndex(InterCellThermalResistance,S); % InterCellThermalResistanceConnectionIndex
        P = 3; % Batteries in Parallel
        S = 2; % Batteries in Series
        NumInterCellThermalConnections = 4; % Number of inter-cell thermal connections
        NumInterParallelAssemblyThermalConnections = 7; % Number of inter-parallel assembly thermal connections
        InterParallelAssemblyConnectionsMapping = [1 1 1 1 1 1 1;2 2 2 2 2 2 2]; % Inter-parallel assembly connections mapping
        InterParallelAssemblyCellConnectionsMapping = [1 1 2 2 2 3 3;1 2 1 2 3 2 3]; % Parallel assembly to cell mapping
        InterCellConnectionsMapping = [1 2 1 2;2 3 2 3]; % Cell model to neighbors mapping
        CellCount = P*S; % Number of cells in battery
        NumCellThermalNodeElements = ParallelAssembly(1).NumCellThermalNodeElements; % NumCellThermalNodeElements
    end

    parameters
        SOC_vecCell = {[0, .1, .25, .5, .75, .9, 1],'1'}; % Vector of state-of-charge values, SOC
        T_vecCell = {[278, 293, 313],'K'}; % Vector of temperatures, T
        V0_matCell = {[3.49, 3.5, 3.51; 3.55, 3.57, 3.56; 3.62, 3.63, 3.64; 3.71, 3.71, 3.72; 3.91, 3.93, 3.94; 4.07, 4.08, 4.08; 4.19, 4.19, 4.19],'V'}; % Open-circuit voltage, V0(SOC,T)
        V_rangeCell = {[0, inf],'V'}; % Terminal voltage operating range [Min Max]
        R0_matCell = {[.0117, .0085, .009; .011, .0085, .009; .0114, .0087, .0092; .0107, .0082, .0088; .0107, .0083, .0091; .0113, .0085, .0089; .0116, .0085, .0089],'Ohm'}; % Terminal resistance, R0(SOC,T)
        AHCell = {27,'A*hr'}; % Cell capacity, AH
        extrapolation_optionCell = {simscape.enum.extrapolation.nearest,'1'}; % Extrapolation method for all tables
        thermal_massCell = {100,'J/K'}; % Thermal mass
        AmbientResistance = {25,'K/W'}; % Cell level ambient thermal path resistance
        InterCellThermalResistance = {1,'K/W'}; % Inter-cell thermal path resistance
        InterParallelAssemblyThermalResistance = {1,'K/W'}; % Inter-parallel assembly thermal path resistance
    end

    parameters(Access=private)
        AmbientResistanceScaled = AmbientResistance; % Scaled cell level ambient thermal path resistance
        InterCellThermalResistanceScaled = InterCellThermalResistance; % Scaled inter-cell thermal path resistance
        InterParallelAssemblyThermalResistanceScaled = InterParallelAssemblyThermalResistance .* ones(NumCellThermalNodeElements,NumInterParallelAssemblyThermalConnections) * NumCellThermalNodeElements / size(InterParallelAssemblyThermalResistance,1); % Scaled inter-parallel assembly thermal path resistance
    end

    nodes
        p = foundation.electrical.electrical; % +
        n = foundation.electrical.electrical; % -
        AmbH = foundation.thermal.thermal; % AmbH
    end

    variables
        iCell = {repmat(0,6,1),'A'}; % Cell current (positive in)
        vCell = {repmat(0,6,1),'V'}; % Cell terminal voltage
        socCell = {value={repmat(1,6,1),'1'},priority=priority.high}; % Cell state of charge
        numCyclesCell = {value={repmat(0,6,1),'1'},priority=priority.high}; % Cell discharge cycles
        temperatureCell = {value={repmat(298.15,6,1),'K'},priority=priority.high}; % Cell temperature
        vParallelAssembly = {value={repmat(0,2,1),'V'},priority=priority.none}; % Parallel Assembly Voltage
        socParallelAssembly = {value={repmat(1,2,1),'1'},priority=priority.none}; % Parallel Assembly state of charge
    end

    equations
        assert(length(iCell) == CellCount);
        assert(length(vCell) == CellCount);
        assert(length(socCell) == CellCount);
        assert(length(numCyclesCell) == CellCount);
        assert(length(temperatureCell) == CellCount);
        assert(length(vParallelAssembly) == S);
        assert(length(socParallelAssembly) == S);
        assert(isequal(size(AmbientResistance),[1,1]) || isequal(size(AmbientResistance),[NumCellThermalNodeElements,P*S]),...
            'Cell level ambient thermal path resistance must be scalar or an M-by-N array, where M is the number of elements of the cell thermal node and N is number of cells modeled by the block.');
        assert(isequal(size(InterCellThermalResistance),[1,1]) || isequal(size(InterCellThermalResistance),[NumCellThermalNodeElements,NumInterCellThermalConnections]),...
            'Inter-cell thermal path resistance must be scalar or an M-by-N array, where M is the number of elements of the cell thermal node and N is number of inter-cell thermal connections modeled by the block.');
        assert(isequal(size(InterParallelAssemblyThermalResistance),[1,1]) || isequal(size(InterParallelAssemblyThermalResistance),[NumCellThermalNodeElements,NumInterParallelAssemblyThermalConnections]),...
            'Inter-parallel assembly thermal path resistance must be scalar or an M-by-N array, where M is the number of elements of the cell thermal node and N is number of inter-parallel assembly thermal connections modeled by the block.');
    end

    connections
        connect(p,ParallelAssembly(1).p);
        connect(n,ParallelAssembly(end).n);
        connect(ParallelAssembly(:).AmbH,AmbH);
    end

    annotations
        [p] : Side=top;
        [n] : Side=bottom;
        UILayout = [UIGroup("Main",SOC_vecCell,T_vecCell,V0_matCell,V_rangeCell,R0_matCell,AHCell,extrapolation_optionCell),...
            UIGroup("Thermal",thermal_massCell,AmbientResistance,InterCellThermalResistance,InterParallelAssemblyThermalResistance)];
        Icon = 'module.svg';
    end

    for Sidx = 1:S
        components(ExternalAccess=observe,CompileReuse=true)
            ParallelAssembly(Sidx) = Batteries.ParallelAssemblies.ParallelAssemblyType1(...
                P = P,SOC_vecCell = SOC_vecCell,T_vecCell = T_vecCell,...
                V0_matCell = V0_matCell,V_rangeCell = V_rangeCell,R0_matCell = R0_matCell,...
                AHCell = AHCell,extrapolation_optionCell = extrapolation_optionCell,...
                thermal_massCell = thermal_massCell,...
                AmbientResistance = AmbientResistanceScaled(:,AmbientResistanceConnectionIndex(1,Sidx):AmbientResistanceConnectionIndex(2,Sidx)),...
                InterCellThermalResistance = InterCellThermalResistanceScaled(:,InterCellThermalResistanceConnectionIndex(1,Sidx):InterCellThermalResistanceConnectionIndex(2,Sidx)),iCell.priority = priority.none,...
                vCell.priority = priority.none,socCell.priority = priority.none,...
                numCyclesCell.priority = priority.none,temperatureCell.priority = priority.none,...
                vParallelAssembly.priority = priority.none,...
                socParallelAssembly.priority = priority.none);
        end
    end

    for Sidx = 1:S-1
        connections
            connect(ParallelAssembly(Sidx).n,ParallelAssembly(Sidx+1).p);
        end
    end

    for Sidx = 1:S
        equations
            ParallelAssembly(Sidx).iCell == reshape(iCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly(Sidx).vCell == reshape(vCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly(Sidx).socCell == reshape(socCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly(Sidx).numCyclesCell == reshape(numCyclesCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly(Sidx).temperatureCell == reshape(temperatureCell((Sidx*P-(P-1)):(Sidx*P)),P,1);
            ParallelAssembly(Sidx).vParallelAssembly == vParallelAssembly(Sidx);
            ParallelAssembly(Sidx).socParallelAssembly == socParallelAssembly(Sidx);
        end
    end

    for InterParallelAssemblyConnectionIndex = 1:NumInterParallelAssemblyThermalConnections
        connections
            connect([ParallelAssembly(InterParallelAssemblyConnectionsMapping(1,InterParallelAssemblyConnectionIndex)).InterCellH(:,InterParallelAssemblyCellConnectionsMapping(1,InterParallelAssemblyConnectionIndex))]',[InterParallelAssemblyThermalResistor(:,InterParallelAssemblyConnectionIndex).A]);
            connect([InterParallelAssemblyThermalResistor(:,InterParallelAssemblyConnectionIndex).B],[ParallelAssembly(InterParallelAssemblyConnectionsMapping(2,InterParallelAssemblyConnectionIndex)).InterCellH(:,InterParallelAssemblyCellConnectionsMapping(2,InterParallelAssemblyConnectionIndex))]');
        end

        for NodeElementIndex = 1:NumCellThermalNodeElements
            components(ExternalAccess=observe)
                InterParallelAssemblyThermalResistor(NodeElementIndex,InterParallelAssemblyConnectionIndex) = foundation.thermal.elements.resistance(...
                    resistance = InterParallelAssemblyThermalResistanceScaled(NodeElementIndex,InterParallelAssemblyConnectionIndex));
            end
        end
    end
end

function indexes = getConnectionIndex(parameter,numChildComponents)
    definitions
        parameterWidth=size(parameter,2);
        firstIndex=(1:max(1,parameterWidth/numChildComponents):parameterWidth) .* ones(1,numChildComponents);
        lastIndex=firstIndex + max(1,parameterWidth/numChildComponents)-1;
        indexes=[firstIndex;lastIndex];
    end
end